

;; Change between .h and .cpp

;; (defun change-between-h-cpp ()
;;   "If the library eassist is loaded, call
;;       eassist-switch-h-cpp. Otherwise, call the builtin
;;       ff-find-other-file function"
;;   (interactive)
;;   (if (fboundp 'eassist-switch-h-cpp)
;;       (eassist-switch-h-cpp)
;;     (ff-find-other-file)))


;; Compile Functions

(defvar darlan-current-cmake-target nil)

(defvar darlan-current-cmake-target-run-arguments nil)

(defvar darlan-current-cmake-target-folder nil)

(defvar darlan-cmake-use-ninja nil)

(defvar darlan-build-dir "build")

(defun darlan-get-project-root ()
  "Get the current project root"
  (projectile-project-root)
  ;; (project-root (project-current))
  )

(defun darlan-get-make-or-ninja-compile-command ()
  "Get the CMake generated makefile or ninja compile command"
  (if darlan-cmake-use-ninja
      "ninja "
    (concat "make -k -j " (number-to-string (system-cores :logical)) " ")
    )
  )

(defun darlan-save-and-compile-internal (target-name folder-name)
  "Compile the target 'target-name' using the cmake generated Makefile"
  (save-buffer 0)
  ;; (compile (concat "make -k -j 8 " darlan-current-cmake-target))
  (let ((make-command (concat "cd " (darlan-get-project-root) darlan-build-dir "/" folder-name" && " (darlan-get-make-or-ninja-compile-command))))
    (compile (concat make-command target-name)))
  )


(defun darlan-save-and-compile (target-name-and-folder)
  "Ask the target name then save and compile the target"
  (interactive "sCompile TargetName: ")

  (if (string-match " " target-name-and-folder)
      (progn
        (setq target-name-and-folder (split-string target-name-and-folder))

        (setq target-name (car target-name-and-folder))
        (setq folder-name (car (cdr target-name-and-folder)))
        )
    (progn
      (setq target-name target-name-and-folder)
      (setq folder-name ""))
    )

  (setq darlan-current-cmake-target target-name)
  (setq darlan-current-cmake-target-folder folder-name)
  (darlan-save-and-compile-last-target)
  )


(defun darlan-save-and-compile-last-target ( )
  "Save and compile the last target"
  (interactive)
  (darlan-save-and-compile-internal darlan-current-cmake-target darlan-current-cmake-target-folder)
  )

(defun darlan-run-last-target ()
  (interactive)
  (let ((run-command (concat "cd " (darlan-get-project-root) darlan-build-dir "/bin && ./" darlan-current-cmake-target " " darlan-current-cmake-target-run-arguments)))
    (compile run-command)
    )
  )

(defun darlan-run-last-target-with-arguments (args)
  "Ask for arguments to run the last target and then run it"
  (interactive "sArguments: ")
  (setq darlan-current-cmake-target-run-arguments args)
  (darlan-run-last-target)
  )

;; (defun darlan-compile-and-run-last-target ()
;;   (interactive)
;;   (darlan-save-and-compile-last-target)
;;   (while compilation-in-progress
;;     (sleep-for 0 100)
;;     )
;;   (darlan-run-last-target)
;;   )

(defun darlan-get-cmake-this-file-target ()
  ;; "Get the name of the compile target for the currently visited file"
  (let ((target-name (darlan-replace-in-string (darlan-get-project-root) "" (buffer-file-name))))
    (setq target-name (replace-regexp-in-string "\\.cpp\\|\\.h" ".o" target-name))
    )
  )


;; Compile only the current file (prom a cmake based project)
(defun darlan-save-and-compile-single-file ()
  (interactive)
  ;;(darlan-save-and-compile-internal (darlan-get-cmake-this-file-target))
  (save-buffer 0)
  (rtags-compile-file)
  )


(defun darlan-generate-documentation ( )
  "Generate the documentation in a cmake based project using Doxygen.
This assume that there is a 'doc' folder in the project root."
  (interactive)
  (let ((doxygen-command (concat "cd " (darlan-get-project-root) "docs && doxygen")))
    (compile doxygen-command)
    )
  )


(defun darlan-open-doxygen-generated-index ( )
  "Open the index.html file generated by Doxygen for the cmake based project"
  (interactive)
  (let ((open-index-command (concat "firefox " (darlan-get-project-root) "docs/html/index.html")))
    (start-process-shell-command
     "browse"
     "ProjectDocumentation"
     open-index-command)
    )
  )
